//      BISMILLAH-IR-RAHMAN-IR-RAHIM


#include <bits/stdc++.h>
using namespace std ;
typedef long long ll ;
typedef long double ld ;
typedef unsigned long long ull ;
typedef vector<int> vi ;
typedef vector<ll> vl ;
typedef vector<vi> vvi ;
typedef vector<vl> vvl ;
typedef pair<int, int> pii ;
typedef pair<float, float> pff ;
typedef pair<double, double> pdd ;
typedef pair<ll, ll> pll ;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds ;
template <class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;
#define pb push_back
#define PI 3.14159265358979323
#define file() freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout)
#define fastIO	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0) ;
ll bin_expo(ll base, ll pow, ll m)
{       if (pow == 0) return 1 ; 
        ll ret = bin_expo(base, pow / 2, m) % m ;
        if (pow & 1)return (ret % m * ret % m * base % m) % m ; 
        else return (ret % m * ret % m) % m;}
ll mod_add(ll a, ll b, ll m) { return ( ( a % m ) + ( b % m ) ) % m ; }
ll mod_sub(ll a, ll b, ll m) { return ( ( a % m ) - ( b % m ) ) % m ; }
ll mod_mul(ll a, ll b, ll m) { return ( ( a % m ) * ( b % m ) ) % m ; }
ll mod_div(ll a, ll b, ll m) { return ( ( a % m ) * bin_expo(b, m - 2, m) ) % m ; }
ll lcm(ll a, ll b) { return (a * b) / __gcd(a, b) ; }
int dx[] = {0, 0, +1, -1, +1, -1, -1, +1} ; 
int dy[] = {+1, -1, 0, 0, +1, -1, +1, -1} ;  
const ll infLL = 4e18 + 123 ; 
const ll inf = 1e17 + 7 ; 
const ll mod = 1e9 + 7 ; 
const ll mod2 = 1e9 + 9 ; 
const int mx = 1e3 + 123 ; 
const double eps = 1e-7 ; 

int dp[mx][mx] ; 
int l , r ; 


int lps(string s)
{
        int ret = 0 ; 
        int n = s.size() ; 
        for(int i=0;i<n;i++)
        {
                dp[i][i] = 1 ; 
                if(i+1<n and s[i]==s[i+1])
                {
                        dp[i][i+1] = 1 ; 
                }
        }
        for(int i=2;i<n;i++)
        {
                for(int j=0;j<n;j++)
                {
                        int k = j+i ; 
                        if(k<n and s[j]==s[k] and dp[j+1][k-1]==1)
                        {
                                dp[j][k] = 1 ; 
                        }
                }
        }
        for(int i=0;i<n;i++)
        {
                int fastone = -1 , lastone = -1 ; 
                for(int j=0;j<n;j++)
                {
                        if(dp[i][j]==1)
                        {
                                if(fastone==-1) fastone = j ; 
                                lastone = j ; 
                        }
                }
                int len = lastone - fastone + 1 ; 
                if(ret<len)
                {
                        ret = len ; 
                        l = fastone ; 
                        r = lastone ;
                } 
        }
        return ret ; 
}


void solution()
{
        string s ; 
        cin >> s; 
        cout << "Length of the longest palindromic Substring : " << lps(s) << endl ;  
        for(int i=l;i<=r;i++)
        {
                cout << s[i]  ; 
        }
        cout << endl ; 
}       


int main() 
{ 
        fastIO ;
        // file() ;
        int _ = 1; //cin >> _ ;
        while (_--) solution() ;
        return 0 ;
}
